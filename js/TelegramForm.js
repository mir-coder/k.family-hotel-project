export default class TelegramForm {
    constructor(token, chatId) {
        this.botToken = token; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        this.chatId = chatId;  // Chat ID, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        this.apiUrl = `https://api.telegram.org/bot${this.botToken}/sendMessage`;
        this.init();
    }

    init() {
        const form = document.getElementById('feedbackForm');
        form.addEventListener('submit', (event) => {
            event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
            this.handleSubmit(form); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
        });
    }

    handleSubmit(form) {
        const name = form['name'].value;
        const phone = form['phone'].value;
        const arrivalDate = form['arrivalDate'].value;
        const departureDate = form['departureDate'].value;
        const apartments = form['select-apartments'];
        const selectedApartmentText = apartments.options[apartments.selectedIndex].text; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        const carPresence = form.querySelector('.checkbox__input').checked ? '–î–∞' : '–ù–µ—Ç';

        const message = `
–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –Ω–æ–º–µ—Ä–∞:

üë§  <b>–§.–ò.–û: </b> ${name}
‚òéÔ∏è  <b>–¢–µ–ª–µ—Ñ–æ–Ω: </b> ${phone}
üóì  <b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: </b> ${arrivalDate}
üóì  <b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: </b> ${departureDate}
üè†  <b>–ù–æ–º–µ—Ä: </b> ${selectedApartmentText}
üöò  <b>–ù–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: </b> ${carPresence}
        `;

        this.sendMessage(message).then(() => {
            alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
            form.reset(); // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É

            // –°–¥–µ–ª–∞—Ç—å —Å–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        });
    }

    sendMessage(message) {
        const data = {
            chat_id: this.chatId,
            text: message,
            parse_mode: 'HTML'
        };

        return fetch(this.apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
            }
            return response.json();
        })
        .catch(error => {
            console.error(error);
        });
    }
}
